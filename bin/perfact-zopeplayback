#!/usr/bin/env python
#
# perfact-zopeplayback  -  Upload a subpath into the Data.fs
#

import sys
# for argument reading and parsing:
import argparse
import sys
import subprocess
# for Data.fs reading / writing:
import perfact.zodbsync

# advanced logging is only available if python-perfact is available
try:
    import perfact.loggingtools
except ImportError:
    pass

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Upload objects to the Data.fs'
    )
    default_configfile = '/etc/perfact/modsync/zodb.py'
    parser.add_argument('--config', '-c',
                        type=str,
                        help=('Path to config (default: %s)' %
                              default_configfile),
                        default=default_configfile)
    parser.add_argument(
        '--override', '-o', action='store_true',
        help='Override object type changes when uploading',
        default=False)
    parser.add_argument(
            '--no-recurse', action='store_true',
            help="Only upload metadata, do not remove elements or recurse."
            " Note: If a path no longer present on the file system is given, "
            " it is still removed.",
            default=False)
    parser.add_argument(
            '--skip-errors', action='store_true',
            help="Skip failed objects and continue",
            default=False)
    parser.add_argument(
        'path', nargs='+', type=str,
        help='Sub-Path in Data.fs to be recorded',
        )
    parser.add_argument(
        '--commit', type=str,
        help='Git commit ID which is cherry-picked and uploaded'
    )
    if 'perfact.loggingtools' in sys.modules:
        perfact.loggingtools.addArgs(parser, name='ZODBSync')

    args = parser.parse_args()

    logger = None
    if 'perfact.loggingtools' in sys.modules:
        logger = perfact.loggingtools.createLogger(args=args, name='ZODBSync')
    paths = args.path
    paths.sort()
    override = args.override
    recurse = not args.no_recurse

    commit = args.commit

    if (commit and paths):
        print('Error: --commit and paths are exclusive')
        sys.exit(1)
    if (not commit and not paths):
        print('Error: either a commit ID or at least one path are required')
        sys.exit(2)

    # Setup sync toolkit
    sync = perfact.zodbsync.ZODBSync(conffile=args.config, logger=logger)

    def gitcmd(*args):
        return ['git', '-C', sync.base_dir] + list(args)

    if commit:
        base_dir = '/home/viktor/git/ema-devel-2018-test'
        # obtain files affected by the commit
        files = [
            line for line in subprocess.check_output(
                gitcmd('diff-tree', '--no-commit-id', '--name-only', '-r',
                       commit), universal_newlines=True
            ).split('\n')
            if line
        ]
        paths = [
            filename[len('__root__'):].rsplit('/',1)[0]
            for filename in files
        ]
        print('Affected paths:')
        for path in paths:
            print('  ', path)

        # check if these files currently differ from their state *before* the given commit
        try:
            subprocess.check_call(
                gitcmd('diff', '--exit-code', commit+'~', 'HEAD~', '--', *files)
            )
        except subprocess.CalledProcessError:
            print('Affected files differ between current HEAD and state before'
                  ' commit that is to be applied')
            sys.exit(1)
        subprocess.check_call(gitcmd('cherry-pick', commit))

    note = 'perfact-zopeplayback'
    if len(paths) == 1:
        note += ': ' + paths[0]
    txn_mgr = sync.start_transaction(note=note)

    try:
        for path in paths:
            sync.playback(path=path,
                          override=override,
                          recurse=recurse,
                          skip_errors=args.skip_errors)
    except Exception:
        print('Error with path ' + path)
        txn_mgr.abort()
        raise
    finally:
        txn_mgr.commit()
