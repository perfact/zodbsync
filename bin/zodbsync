#!/usr/bin/python

import sys
import argparse

try:
    import perfact.loggingtools
except ImportError:
    pass


class CmdRecord():
    ''' Sub-command to record objects from the Data.FS to the file system.
    '''
    def __init__(self, parser):
        parser.add_argument('--lasttxn', nargs='?', type=str,
                            help='Record only transactions since this '
                            'transaction (or the last used)',
                            const='last', default=None)
        parser.add_argument('--commitmsg', '-m', nargs='?', type=str,
                            help='Commit message for standard run.',
                            default=None)
        parser.add_argument('path', type=str, nargs='+',
                            help='Sub-Path in Data.fs to be recorded')

    def __call__(self, args):
        print(args)


class CmdWatch():
    ''' Sub-command to start watcher, which periodically records changes as
    they occur.
    '''
    def __init__(self, parser):
        pass

    def __call__(self, args):
        print(args)


class CmdPlayback():
    ''' Sub-command to play back objects from the file system to the Data.fs.
    '''
    def __init__(self, parser):
        parser.add_argument(
            '--override', '-o', action='store_true',
            help='Override object type changes when uploading',
            default=False
        )
        parser.add_argument(
            '--no-recurse', action='store_true',
            help='''Only upload metadata, do not remove elements or recurse.
            Note: If a path no longer present on the file system is given, it
            is still removed.''',
            default=False
        )
        parser.add_argument(
            '--skip-errors', action='store_true',
            help="Skip failed objects and continue",
            default=False
        )

    def __call__(self, args):
        print(args)


class CmdPick():
    ''' Sub-command to cherry-pick commits, apply them and play back affected
    objects.
    '''
    def __init__(self, parser):
        parser.add_argument(
            'commit', type=str, nargs='+',
            help='''Commits that are checked for compatibility and applied,
            playing back all affected paths at the end.'''
        )

    def __call__(self, args):
        print(args)


class CmdApply():
    '''Sub-command to apply patches and play back changed files.'''

    def __init(self, parser):
        parser.add_argument(
            'patchfile', type=str, nargs='+',
            help='''Patch files which are applied to the repository (using git
            am). If successful, the changed objects are played back. Else, the
            am session is automatically rolled back.''',
        )

    def __call__(self, args):
        print(args)


class CmdReset():
    ''' Sub-command to reset the current branch to the state of another branch,
    playing back any changed files.'''

    def __init__(self, parser):
        pass

    def __call__(self, args):
        print(args)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='''
        Tool to sync objects between a ZODB and a git-controlled folder on the
        file system.
    ''')
    default_configfile = '/etc/perfact/modsync/zodb.py'
    parser.add_argument('--config', '-c', type=str,
                        help='Path to config (default: %s)'
                        % default_configfile,
                        default=default_configfile)
    if 'perfact.loggingtools' in sys.modules:
        perfact.loggingtools.addArgs(parser, name='ZODBSync')

    # add all available classes starting with Cmd as sub-command runners
    subs = parser.add_subparsers()
    for cmdid, cmd in list(locals().items()):
        if not cmdid.startswith('Cmd'):
            continue
        subparser = subs.add_parser(cmdid[3:].lower())
        subparser.set_defaults(runner=cmd(subparser))

    args = parser.parse_args()

    if 'perfact.loggingtools' in sys.modules:
        logger = perfact.loggingtools.createLogger(args=args, name='ZODBSync')

    args.runner(args)
